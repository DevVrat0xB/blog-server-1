declare type MaybePromise<T> = T | Promise<T>;
declare type Static = boolean;
declare type Declarative = Record<string, any>;
declare type Imperative<T> = (args: T) => MaybePromise<Static | Declarative>;
declare type FieldImperative<T> = (args: T) => MaybePromise<Static>;
export declare type ListAccess<Args> = {
    create: Static | Declarative | Imperative<Args>;
    read: Static | Declarative | Imperative<Args>;
    update: Static | Declarative | Imperative<Args>;
    delete: Static | Declarative | Imperative<Args>;
};
export declare type AuthAccess<Args> = {
    auth: Static | Declarative | Imperative<Args>;
};
export declare type FieldAccess<Args> = {
    create: Static | FieldImperative<Args>;
    read: Static | FieldImperative<Args>;
    update: Static | FieldImperative<Args>;
};
export declare type CustomAccess<Args> = Static | Declarative | Imperative<Args>;
export declare function parseCustomAccess<SN extends string, Args>({ defaultAccess, access, schemaNames, }: {
    defaultAccess: CustomAccess<Args>;
    access?: Partial<Record<SN, CustomAccess<Args>>> | CustomAccess<Args>;
    schemaNames: SN[];
}): Record<SN, CustomAccess<Args>> & {
    internal: true;
};
declare type ListAuthAccess<Args> = ListAccess<Args> & AuthAccess<Args>;
export declare function parseListAccess<SN extends string, Args>({ listKey, defaultAccess, access, schemaNames, }: {
    listKey: string;
    defaultAccess: ListAccess<Args>['read'];
    access?: Partial<Record<SN, Partial<ListAuthAccess<Args>> | ListAccess<Args>['read']>> | Partial<ListAuthAccess<Args>> | ListAccess<Args>['read'];
    schemaNames: SN[];
}): Record<SN, ListAuthAccess<Args>> & {
    internal: Record<"read" | "create" | "update" | "delete" | "auth", true>;
};
export declare function parseFieldAccess<SN extends string, Args>({ listKey, fieldKey, defaultAccess, access, schemaNames, }: {
    listKey: string;
    fieldKey: string;
    defaultAccess: FieldAccess<Args>['read'];
    access?: Partial<Record<SN, Partial<FieldAccess<Args>> | FieldAccess<Args>['read']>> | Partial<FieldAccess<Args>> | FieldAccess<Args>['read'];
    schemaNames: SN[];
}): Record<SN, FieldAccess<Args>> & {
    internal: Record<"read" | "create" | "update", true>;
};
export declare function validateCustomAccessControl<Args>({ access, args, }: {
    access: CustomAccess<Args>;
    args: Args;
}): Promise<boolean | Record<string, any>>;
export declare function validateListAccessControl<Args extends {
    operation: keyof ListAccess<any>;
    listKey: string;
}>({ access, args }: {
    access: ListAccess<Args>;
    args: Args;
}): Promise<boolean | Record<string, any>>;
export declare function validateFieldAccessControl<Args extends {
    operation: keyof FieldAccess<Args>;
    listKey: string;
    fieldKey: string;
}>({ access, args }: {
    access: FieldAccess<Args>;
    args: Args;
}): Promise<boolean>;
export declare function validateAuthAccessControl<Args extends {
    operation: keyof AuthAccess<Args>;
}>({ access, args }: {
    access: AuthAccess<Args>;
    args: Args;
}): Promise<boolean | Record<string, any>>;
export {};
